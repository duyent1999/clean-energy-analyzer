name: Deploy Clean-Energy-Forecast App

on:
  push:
    branches:
      - main

jobs:
  deploy-aws:
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -input=false -lock-timeout=5m
        working-directory: ./terraform
        env:
          TF_VAR_openweather_api_key: ${{ secrets.OPENWEATHER_API_KEY }}
          TF_VAR_nrel_api_key : ${{ secrets.NREL_API_KEY }}
          TF_LOG: DEBUG

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: deploy-aws
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/clean-energy-forecast:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/clean-energy-forecast:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            FRONTEND_API_ENDPOINT=${{ secrets.FRONTEND_API_ENDPOINT}}

      - name: Update ECS Service (Optional)
        if: success()
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ./terraform/ecs-task-definition.json
          service: clean-energy-service
          cluster: energy-cluster
          wait-for-service-stability: true
  